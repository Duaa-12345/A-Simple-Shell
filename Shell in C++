#include<unistd.h>
#include<iostream>
#include<vector>
#include<string.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <fcntl.h>
#include <sys/stat.h>

using namespace std;
int outcopy = 0;
int main(int argc, char** argv) {
	if (argc > 1) { //check for file input
		int ind = 0;
		char* filename = argv[1];//get file name
		if (filename[0] == '<') {
			for (ind = 0; filename[ind] != '\0'; ind++) {
				filename[ind] = filename[ind + 1];
				if (filename[ind + 1] == '\0')
					break;
			}
		}
		if (argc > 2) {
			char* outfile = argv[2];//get file name
			if (outfile[0] == '>') {//eliminate extra character
				for (ind = 0; outfile[ind] != '\0'; ind++) {
					outfile[ind] = outfile[ind + 1];
					if (outfile[ind + 1] == '\0')
						break;
				}
			}
			outcopy = dup(1);//output stdout copy saved
			int outf = open(outfile, O_CREAT | O_RDWR | O_APPEND);
			dup2(outf, 1);//output redirection
			cout << "FILE\n";
		}

		printf("\nFile input mode!\n\n");
		printf("Welcome to Terminal\n");
		FILE* fileptr = fopen(filename, "r");//open file to read
		int i = 0, j = 0, k = 0, l = 0, count_lines = 0;
		char line[200][50];
		char comm[20];
		char par1[50];
		char par2[50];
		char chr;
		chr = getc(fileptr);//get data from file
		while (chr != EOF)//get data till End of File
		{
			//Count whenever new line is encountered
			if (chr == '\n')
			{
				count_lines = count_lines + 1;
			}
			//take next character from file.
			chr = getc(fileptr);
		}
		fclose(fileptr);
		printf("Total Commands : %d\n", count_lines); //total commands
		FILE* f = fopen(filename, "r");
		for (i = 0; i < count_lines; i++) {
			j = 0;
			chr = getc(f);
			while (chr != '\n') {
				line[i][j++] = chr;
				chr = getc(f);
				if (chr == EOF) {
					line[i][j] = '\0';//check for commands
					break;
				}
			}
			line[i][j] = '\0';
		}
		int chh = 0;
		fclose(f);
		int a = 0, b = 0, c = 0;
		bool cont = true;
		for (i = 0; i < count_lines && cont; i++) {//execute all commands in sequence
			comm[0] = '\0';
			par1[0] = '\0';
			par2[0] = '\0';
			j = 0; k = 0; a = 0; l = 0;
			for (a = 0; line[i][a] != ' '; a++) {
				if (line[i][a] == '\0') {
					break;
				}
				comm[j++] = line[i][a];//tokenize command
			}
			comm[j] = '\0';
			if (line[i][a] != '\0') {
				a++;
				for (; line[i][a] != ' '; a++) {
					par1[k++] = line[i][a];//parameter 1
					if (line[i][a] == '\0') {
						break;
					}
				}
				par1[k] = '\0';
				if (line[i][a] != '\0') {
					a++;
					for (; line[i][a] != '\0'; a++) {
						par2[l++] = line[i][a];//parameter 2
					}
					par2[l] = '\0';
				}
			}
			if (comm[j - 1] == '&')
				comm[j - 1] = '\0';
			printf("\nNo %d is :\n", i + 1);
			if (comm[0] != '\0')
				printf("%s ", comm);
			if (par1[0] != '\0')
				printf("%s ", par1);
			else
				printf("\n");
			if (par2[0] != '\0')
				printf("%s\n", par2);
			else
				printf("\n");


			if (!strcmp(comm, "pause") || !strcmp(comm, "quit")) {//check for pause or quit
				if (!strcmp(comm, "pause")) {
					char ch;
					scanf("%c", &ch);//hold program
				}
				else
					cont = false;//quit
			}
			else if (!strcmp(comm, "environ")) {//check environment settings
				pid_t p = fork();
				if (p == 0) {
					execlp("env", "env", NULL);
				}
				else {
					wait(NULL);
				}
			}
			else if (!strcmp(comm, "clr")) {//clearscreen
				pid_t p = fork();
				if (p == 0) {
					execlp("clear", "clear", NULL);
				}
				else {
					wait(NULL);
				}
			}
			else if (par1[0] != '\0' && par2[0] == '\0') {//only one parameter
				if (comm[0] == 'c' && comm[1] == 'd') {
					chdir(par1);

				}
				else {
					pid_t p = fork();
					if (p == 0) {
						execlp(comm, comm, par1, NULL);
					}
					else {
						wait(NULL);
					}
				}
			}
			else if (par1[0] != '\0' && par2[0] != '\0') {
				//two parameters
				pid_t p = fork();
				if (p == 0) {
					execlp(comm, comm, par1, par2, NULL);
				}
				else {
					wait(NULL);
				}
			}
			else if (par1[0] == '\0' && par2[0] == '\0') {
				//no parameter		
				pid_t p = fork();
				if (p == 0) {
					execlp(comm, comm, NULL);
				}
				else {
					wait(NULL);
				}
			}
		}
		if (argc > 2) {
			dup2(1, outcopy);
			close(outcopy);
		}
	}
	else {//terminal input mode
		printf("\nTerminal Input Mode!!\n\n");

		cout << "Welcome to shell\n";
		bool cont = true;
		while (cont) {
			char* in = new char[200];
			char* comm = new char[50], * par1 = new char[50],
				* par2 = new char[50], * par3 = new char[50];
			cout << "\nEnter Command: ";
			cin.getline(in, 200);
			int a = 0;
			int b = 0, c = 0, d = 0, e = 0;
			for (a = 0; in[a] != ' '; a++) {
				if (in[a] == '\0')
					break;
				comm[b++] = in[a];//tokenize command
			}
			comm[b] = '\0';
			if (comm[b - 1] == '&') {
				comm[b - 1] = '\0';
			}
			if (in[a] != '\0') {
				a++;
				for (; in[a] != ' '; a++) {
					par1[c++] = in[a];//parameter 1
					if (in[a] == '\0')
						break;
				}
				par1[c] = '\0';
				if (in[a] != '\0') {
					a++;
					for (; in[a] != ' '; a++) {
						par2[d++] = in[a];//parameter 2
						if (in[a] == '\0')
							break;
					}
					par2[d] = '\0';
					if (in[a] != '\0') {
						a++;
						for (; in[a] != '\0'; a++) {
							par3[e++] = in[a];//parameter 3
						}
						par3[e] = '\0';
					}
				}
			}
			if (!strcmp(comm, "pause") || !strcmp(comm, "quit")) {//pause and quit
				if (!strcmp(comm, "pause")) {
					char ch;
					scanf("%c", &ch);
				}
				else
					cont = false;
			}
			else if (!strcmp(comm, "environ")) {//environment settings
				pid_t p = fork();
				if (p == 0) {
					execlp("env", "env", NULL);
				}
				else {
					wait(NULL);
				}
			}
			else if (!strcmp(comm, "clr")) {//clear screen
				pid_t p = fork();
				if (p == 0) {
					execlp("clear", "clear", NULL);
				}
				else {
					wait(NULL);
				}
			}
			else if (par1[0] != '\0' && par2[0] == '\0') {
				//one parameter
				if (comm[0] == 'c' && comm[1] == 'd') {
					chdir(par1);

				}
				else {
					pid_t p = fork();
					if (p == 0) {
						execlp(comm, comm, par1, NULL);
					}
					else {
						wait(NULL);
					}
				}
			}
			else if (par1[0] != '\0' && par2[0] != '\0') {
				//2 parameters		
				pid_t p = fork();
				if (p == 0) {
					execlp(comm, comm, par1, par2, NULL);
				}
				else {
					wait(NULL);
				}
			}
			else if (par1[0] == '\0' && par2[0] == '\0') {
				//no parameter		
				pid_t p = fork();
				if (p == 0) {
					execlp(comm, comm, NULL);
				}
				else {
					wait(NULL);
				}
			}
		}
	}
	//exit program
	return 0;
}
